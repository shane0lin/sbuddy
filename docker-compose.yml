version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: sbuddy-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-sbuddy_db}
      POSTGRES_USER: ${POSTGRES_USER:-sbuddy}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-sbuddy}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: sbuddy-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-changeme}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Sbuddy Backend API
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sbuddy-api
    restart: unless-stopped
    ports:
      - "${PORT:-3000}:3000"
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-sbuddy}:${POSTGRES_PASSWORD:-changeme}@postgres:5432/${POSTGRES_DB:-sbuddy_db}
      REDIS_URL: redis://:${REDIS_PASSWORD:-changeme}@redis:6379

      # JWT
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-15m}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN:-7d}

      # Session
      SESSION_SECRET: ${SESSION_SECRET}

      # Stripe
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}

      # OpenAI
      OPENAI_API_KEY: ${OPENAI_API_KEY}

      # OCR Service
      OCR_SERVICE_URL: ${OCR_SERVICE_URL:-http://ocr:8000}

      # Server
      PORT: 3000
      NODE_ENV: ${NODE_ENV:-production}

      # File Upload
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-10485760}
      UPLOAD_DIR: ${UPLOAD_DIR:-uploads}

      # OAuth - Google
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}

      # OAuth - Apple (optional)
      APPLE_CLIENT_ID: ${APPLE_CLIENT_ID}
      APPLE_TEAM_ID: ${APPLE_TEAM_ID}
      APPLE_KEY_ID: ${APPLE_KEY_ID}
      APPLE_PRIVATE_KEY: ${APPLE_PRIVATE_KEY}

      # Email (SMTP)
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_SECURE: ${SMTP_SECURE:-false}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      SMTP_FROM: ${SMTP_FROM:-noreply@sbuddy.com}

      # Frontend URL
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3001}
      API_URL: ${API_URL:-http://localhost:3000}

    volumes:
      - uploads_data:/app/uploads

    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/v1/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # OCR Service (Surya) - Optional, comment out if using external OCR
  # ocr:
  #   image: datalab-to/surya:latest
  #   container_name: sbuddy-ocr
  #   restart: unless-stopped
  #   ports:
  #     - "${OCR_PORT:-8000}:8000"
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local

networks:
  default:
    name: sbuddy-network